name: CDK CI

on:
  release:
      types: [created]

jobs:

  release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - uses: actions/setup-node@v1
        with:
          node-version: 10.x
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
      - name: Upload Release and Renew Changelog
        env:
          UPLOAD_URL: ${{ github.event.release.upload_url }}
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          RELEASE_URL: ${{ github.event.release.url }}

        run: |
          set -x

          go get github.com/mitchellh/gox
          sudo apt-get install -y upx

          export CGO_ENABLED=0
          gox -parallel 5 -osarch="darwin/amd64 linux/386 linux/amd64 linux/arm linux/arm64" -ldflags="-s -w " -output="bin/{{.Dir}}_{{.OS}}_{{.Arch}}" ./cmd/cdk/
          gox -parallel 5 -osarch="linux/386 linux/amd64 linux/arm64" -ldflags="-s -w " -tags="thin" -output="bin/{{.Dir}}_{{.OS}}_{{.Arch}}_thin" ./cmd/cdk/

          # cdk_linux_386 cdk_linux_amd64 cdk_linux_arm cdk_linux_arm64
          cp bin/cdk_linux_amd64 bin/cdk_linux_amd64_upx
          upx bin/cdk_linux_amd64_upx

          cp bin/cdk_linux_386 bin/cdk_linux_386_upx
          upx bin/cdk_linux_386_upx

          cp bin/cdk_linux_amd64_thin bin/cdk_linux_amd64_thin_upx
          upx bin/cdk_linux_amd64_thin_upx

          cp bin/cdk_linux_386_thin bin/cdk_linux_386_thin_upx
          upx bin/cdk_linux_386_thin_upx

          DATE_STRING=`date -u +"%Y-%m-%d"`
          SHA256_TEXT_BODY=`cd bin/ && shasum -a 256 * | tr -s '  ' '|'`

          TAG_VERSION=`echo "$GITHUB_REF" | sed -e 's/refs\/tags\///'`

          LAST_TAG="$TAG_VERSION"
          PREVIOUS_TAG=`git for-each-ref --sort='-authordate' --format="%(refname:short)" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sed -n 2p`

          exploit=`git log "${LAST_TAG}...${PREVIOUS_TAG}" --pretty=format:%s -- "pkg/exploit/" | grep -viE ^merge` || :
          evaluate=`git log "${LAST_TAG}...${PREVIOUS_TAG}" --pretty=format:%s -- "pkg/evaluate/" | grep -viE ^merge` || :
          tool=`git log "${LAST_TAG}...${PREVIOUS_TAG}" --pretty=format:%s -- "pkg/tool/" | grep -viE ^merge` || :

          add_before=`echo "$exploit\n$evaluate\n$tool" | uniq`
          all_commit_message=`git log "${LAST_TAG}...${PREVIOUS_TAG}" --pretty=format:%s | grep -viE ^merge` || :
          other=`diff -u <(echo "$add_before") <(echo "$all_commit_message") | grep -E "^\+[a-zA-Z]" | cut -c 2-` || :

          [[ $exploit = *[^[:space:]]* ]] && exploit=`echo "$exploit" | awk '{print toupper(substr($0,1,1))""substr($0,2)}' | sed -e 's/^/* /'` && exploit=$'### Exploits\n\n'"$exploit"
          [[ $evaluate = *[^[:space:]]* ]] && evaluate=`echo "$evaluate" | awk '{print toupper(substr($0,1,1))""substr($0,2)}' | sed -e 's/^/* /'` && evaluate=$'### About Evaluate\n\n'"${evaluate}"
          [[ $tool = *[^[:space:]]* ]] && tool=`echo "$tool" | awk '{print toupper(substr($0,1,1))""substr($0,2)}' | sed -e 's/^/* /'` && tool=$'### Tools\n\n'"${tool}"
          [[ $other = *[^[:space:]]* ]] && other=`echo "$other" | awk '{print toupper(substr($0,1,1))""substr($0,2)}' | sed -e 's/^/* /'` && other=$'### Others\n\n'"${other}"

          RELEASE_BODY=$(cat <<- EOF
          Release Date: $DATE_STRING

          ## Changelog:

          $exploit

          $evaluate

          $tool

          $other

          ## Hash Table

          |SHA256|EXECTUE FILE|
          |---|---|
          |$SHA256_TEXT_BODY|
          EOF
          )

          TITLE="CDK $TAG_VERSION"

          UPLOAD_URL=$(echo -n $UPLOAD_URL | sed s/\{.*//g)
          for FILE in bin/*
          do
              echo "Uploading ${FILE}";
              curl \
              -H "${API_HEADER}" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: $(file -b --mime-type ${FILE})" \
              --data-binary "@${FILE}" \
              "${UPLOAD_URL}?name=$(basename ${FILE})";
          done

          RELEASE_BODY=`echo "$RELEASE_BODY" | jq -sR .`
          curl \
            -XPATCH \
            -H "${API_HEADER}" \
            -H "${AUTH_HEADER}" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"$TITLE\",\"body\": ${RELEASE_BODY}}" \
            "${RELEASE_URL}";
